    package javaapplication5;



    import javax.swing.table.DefaultTableModel;
    import javax.swing.JButton;
    import javax.swing.JFrame;
    import java.awt.Color;
    import java.awt.Component;
    import java.awt.Font;
    import javax.swing.border.Border;
    import javax.swing.BorderFactory;
    import java.awt.event.ActionEvent;
    import java.awt.event.ActionListener;
    import java.util.ArrayList;
    import java.util.HashSet;
    import java.util.Set;
    import javax.swing.JTextField;
    import javax.swing.JOptionPane;
    import javax.swing.JPanel;
    import javax.swing.UIManager;
    import javax.swing.UIManager.LookAndFeelInfo;
    import javax.swing.UnsupportedLookAndFeelException;
    import javax.swing.table.DefaultTableModel;
    import javax.swing.*;
    import java.awt.*;
    import java.awt.event.*;
    import javax.swing.event.ListSelectionEvent;
    import javax.swing.event.ListSelectionListener;
    import javax.swing.table.TableRowSorter;
    import javax.swing.text.AbstractDocument;
    import javax.swing.text.AttributeSet;
    import javax.swing.text.BadLocationException;
    import javax.swing.text.DocumentFilter;
    import javaapplication5.LoginForm;


    public class StudentRecordsManagement extends JFrame {
        private String selectedUserType;
        private JFrame loginFrame;
        
        private JPanel addStudentPanel;
    private JPanel studentInfoPanel;
    
    private JTable studentTable;
private DefaultTableModel tableModel1;
private JTable selectedStudentInfoTable;
private DefaultTableModel selectedStudentInfoModel;




        public StudentRecordsManagement(String selectedUserType) {
        this.selectedUserType = selectedUserType;


            initUI();
    }
        private JButton logoutButton;
        private static final int FRAME_WIDTH = 1200;
        private static final int FRAME_HEIGHT = 700;
        private static final double ASSIGNMENT_WEIGHT = 0.20;
        private static final double LAB_ACTS_WEIGHT = 0.20;
        private static final double QUIZZES_WEIGHT = 0.60;
        





        public StudentRecordsManagement() {

            initUI();

        }

       private void initUI() {
           studentTable = new JTable(tableModel1);
    selectedStudentInfoTable = new JTable(selectedStudentInfoModel);
            setLayout(new BorderLayout());
            
             addStudentPanel = new JPanel();


            JTabbedPane tabbedPane = createTabbedPane();
            add(tabbedPane, BorderLayout.CENTER);
            

            setTitle("Student Records Management");
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

            logoutButton = new JButton("Logout");
          logoutButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to logout?", "Logout Confirmation", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                dispose(); // Dispose the current frame
                // Open the login frame
                LoginForm loginForm = new LoginForm(loginFrame); // <-- pass loginFrame here
                loginForm.setVisible(true);
            }
        }
    });

            JPanel southPanel = new JPanel();
            southPanel.add(logoutButton);
            add(southPanel, BorderLayout.SOUTH);

            setSize(FRAME_WIDTH, FRAME_HEIGHT);
            setExtendedState(JFrame.MAXIMIZED_BOTH);

            setVisible(true);
        }



        private JTabbedPane createTabbedPane() {
    JTabbedPane tabbedPane = new JTabbedPane();

    createStudentTabs(tabbedPane);

    JPanel prelimGradesPanel = (JPanel) tabbedPane.getComponentAt(0);
    String[] prelimColumnNames = {"ID", "Name", "Department", "Course Code", "Assignment", "Quiz", "Exam", "Activity", "Average", "Class Standing"};
    DefaultTableModel prelimTableModel1 = new DefaultTableModel(prelimColumnNames, 0);
    JTable prelimStudentTable1 = new JTable(prelimTableModel1);

    JLabel prelimCourseCodeLabel1 = new JLabel("Course Code:");
    JTextField prelimCourseCodeTextField1 = new JTextField(10);

    JLabel prelimAssignmentLabel1 = new JLabel("Assignment Grade:");
    JTextField prelimAssignmentTextField1 = new JTextField(5);

    // Add a DocumentFilter to the prelimAssignmentTextField to only accept numeric input
    ((AbstractDocument) prelimAssignmentTextField1.getDocument()).setDocumentFilter(new DocumentFilter() {
        @Override
        public void insertString(DocumentFilter.FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
            string = string.replaceAll("[^\\d.]", "");
            super.insertString(fb, offset, string, attr);
        }

        @Override
        public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
            text = text.replaceAll("[^\\d.]", "");
            super.replace(fb, offset, length, text, attrs);
        }
    });

    JLabel prelimQuizLabel1 = new JLabel("Quiz Grade:");
    JTextField prelimQuizTextField1 = new JTextField(5);

    JLabel prelimExamLabel1 = new JLabel("Exam Grade:");
    JTextField prelimExamTextField1 = new JTextField(5);

    JLabel prelimActivityLabel1 = new JLabel("Activity Grade:");
    JTextField prelimActivityTextField1 = new JTextField(5);

    JButton prelimAddStudentButton1 = new JButton("Add Student");
    prelimAddStudentButton1.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            String id = JOptionPane.showInputDialog(null, "Enter ID:");
            String name = JOptionPane.showInputDialog(null, "Enter Name:");
            String department = JOptionPane.showInputDialog(null, "Enter Department:");

            if (id!= null && name!= null && department!= null) {
                prelimTableModel1.addRow(new Object[]{id, name, department, "", "", "", "", "", ""});
            }
        }
    });

    JButton prelimGradeStudentButton1 = new JButton("Grade Student");
    prelimGradeStudentButton1.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            int selectedRow = prelimStudentTable1.getSelectedRow();
            if (selectedRow >= 0) {
                String id = (String) prelimTableModel1.getValueAt(selectedRow, 0);
                String name = (String) prelimTableModel1.getValueAt(selectedRow, 1);
                String department = (String) prelimTableModel1.getValueAt(selectedRow, 2);
                String courseCode = prelimCourseCodeTextField1.getText();

                String assignment = prelimAssignmentTextField1.getText();
                String quiz = prelimQuizTextField1.getText();
                String exam = prelimExamTextField1.getText();
                String activity = prelimActivityTextField1.getText();

                if (id!= null && name!= null && department!= null && courseCode!= null &&!assignment.isEmpty() &&!quiz.isEmpty() &&!exam.isEmpty() &&!activity.isEmpty()) {
                    double assignmentGrade = 0;
                    double quizGrade = 0;
                    double examGrade = 0;
                    double activityGrade = 0;

                    try {
                        assignmentGrade = Double.parseDouble(assignment);
                        quizGrade = Double.parseDouble(quiz);
                        examGrade = Double.parseDouble(exam);
                        activityGrade = Double.parseDouble(activity);
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Please enter valid grades.");
                        return;
                    }

                    double average = (assignmentGrade + quizGrade + examGrade + activityGrade) / 4;

                    // Calculate the weighted grades
                    double weightedAssignment = assignmentGrade * ASSIGNMENT_WEIGHT;
                    double weightedLabActs = activityGrade * LAB_ACTS_WEIGHT;
                    double weightedQuizzes = quizGrade * QUIZZES_WEIGHT;

                    String classStanding;
                    if (average >= 94 && average <= 100 ) {
                        classStanding = "1.00";

                    } else if (average >= 88.5 && average <= 93.99) {
                        classStanding = "1.25";
                    } else if (average >= 83 && average <= 88.49) {
                        classStanding = "1.50";
                    } else if (average >= 77.5 && average <= 82.99) {
                        classStanding = "1.75";
                    } else if (average >= 72 && average <= 77.49) {
                        classStanding = "2.00";
                    } else if (average >= 65.5 && average <= 71.99) {
                        classStanding = "2.25";
                    } else if (average >= 61 && average <= 65.49) {
                        classStanding = "2.50";
                    } else if (average >= 55.5 && average <= 60.99) {
                        classStanding = "2.75";
                    } else if (average >= 50 && average <= 55.49) {
                        classStanding = "3.00";
                    } else if (average<= 49.99) {
                        classStanding = "5.00";
                    } else {
                        classStanding = "INVALID";
                    }

                    prelimTableModel1.setValueAt(courseCode, selectedRow, 3);
                    
                    prelimTableModel1.setValueAt(assignmentGrade, selectedRow, 4);
                    prelimTableModel1.setValueAt(quizGrade, selectedRow, 5);
                    prelimTableModel1.setValueAt(examGrade, selectedRow, 6);
                    prelimTableModel1.setValueAt(activityGrade, selectedRow, 7);
                    prelimTableModel1.setValueAt(String.format("%.2f", average), selectedRow, 8);
                    prelimTableModel1.setValueAt(classStanding, selectedRow, 9); // Add the class standing to the table
                } else {
                    JOptionPane.showMessageDialog(null, "Please fill in all grade fields.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select a student to grade.");
            }
        }
    });

    prelimGradesPanel.setLayout(new GridLayout(0, 1));
    prelimGradesPanel.add(new JScrollPane(prelimStudentTable1));
    prelimGradesPanel.add(prelimCourseCodeLabel1);
    prelimGradesPanel.add(prelimCourseCodeTextField1);
    prelimGradesPanel.add(prelimAssignmentLabel1);
    prelimGradesPanel.add(prelimAssignmentTextField1);prelimGradesPanel.add(prelimQuizLabel1);
    prelimGradesPanel.add(prelimQuizTextField1);
    prelimGradesPanel.add(prelimExamLabel1);
    prelimGradesPanel.add(prelimExamTextField1);
    prelimGradesPanel.add(prelimActivityLabel1);
    prelimGradesPanel.add(prelimActivityTextField1);
    prelimGradesPanel.add(prelimAddStudentButton1);
    prelimGradesPanel.add(prelimGradeStudentButton1);

    return tabbedPane;
}
        
        
        
   private void createStudentTabs(JTabbedPane tabbedPane) {
    JPanel prePanel = new JPanel();
    tabbedPane.add("Student Grading System", prePanel);

    String[] terms = {"Prelim", "Midterm", "Finals"};
    JComboBox<String> termComboBox = new JComboBox<>(terms);
    prePanel.add(termComboBox);

    String[] columnNames = {"ID", "Name", "Department", "Course Code", "Term", "Assignment", "Quiz", "Exam", "Activity", "Average", "Class Standing"};
    DefaultTableModel tableModel1 = new DefaultTableModel(columnNames, 0);
    JTable studentTable = new JTable(tableModel1);
    
     
    
    JComboBox<String> courseCodeComboBox = new JComboBox<>();

    JLabel courseCodeLabel = new JLabel("Course Code:");
    JTextField courseCodeTextField = new JTextField(10);

    JLabel assignmentLabel = new JLabel("Assignment Grade:");
    JTextField assignmentTextField = new JTextField(5);

    // Add a DocumentFilter to the assignmentTextField to only accept numeric input
    ((AbstractDocument) assignmentTextField.getDocument()).setDocumentFilter(new DocumentFilter() {
        @Override
        public void insertString(DocumentFilter.FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
            string = string.replaceAll("[^\\d.]", "");
            super.insertString(fb, offset, string, attr);
        }

        @Override
        public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
            text = text.replaceAll("[^\\d.]", "");
            super.replace(fb, offset, length, text, attrs);
        }
    });

    JLabel quizLabel = new JLabel("Quiz Grade:");
    JTextField quizTextField = new JTextField(5);

    JLabel examLabel = new JLabel("Exam Grade:");
    JTextField examTextField = new JTextField(5);

    JLabel activityLabel = new JLabel("Activity Grade:");
    JTextField activityTextField = new JTextField(5);

    JButton addStudentButton = new JButton("Add Student");
    addStudentButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            String id = JOptionPane.showInputDialog(null, "Enter ID:");
            String name = JOptionPane.showInputDialog(null, "Enter Name:");
            String department = JOptionPane.showInputDialog(null, "Enter Department:");

            if (id!= null && name!= null && department!= null) {
                tableModel1.addRow(new Object[]{id, name, department, "", "", "", "", "", ""});
            }
        }
    });

    JPanel studentInfoPanel = new JPanel();
    tabbedPane.add("Student Info", studentInfoPanel);

    JTable selectedStudentInfoTable = new JTable();
    DefaultTableModel selectedStudentInfoModel = new DefaultTableModel(new Object[][]{}, new String[]{"ID", "Name", "Department", "Course Code", "Term", "Assignment", "Quiz", "Exam", "Activity", "Average", "Class Standing"});
    selectedStudentInfoTable.setModel(selectedStudentInfoModel);
    JScrollPane studentInfoScrollPane = new JScrollPane(selectedStudentInfoTable);
    studentInfoScrollPane.setPreferredSize(new Dimension(1000, 700));
    
    
    
    studentInfoPanel.add(studentInfoScrollPane);

    JTextField searchTextField = new JTextField(20);
    studentInfoPanel.add(searchTextField, BorderLayout.NORTH);  

    JButton searchButton = new JButton("Search ID");
    studentInfoPanel.add(searchButton, BorderLayout.NORTH);
JTextField searchNameTextField = new JTextField(20);
    studentInfoPanel.add(searchNameTextField, BorderLayout.NORTH);
    JButton searchNameButton = new JButton("Search Name");
    studentInfoPanel.add(searchNameButton, BorderLayout.NORTH);
    

    final DefaultTableModel finalSelectedStudentInfoModel = selectedStudentInfoModel;
JButton gradeStudentButton = new JButton("Grade Student");
gradeStudentButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        int selectedRow = studentTable.getSelectedRow();
        if (selectedRow >= 0) {
            String id = (String) tableModel1.getValueAt(selectedRow, 0);
            String name = (String) tableModel1.getValueAt(selectedRow, 1);
            String department = (String) tableModel1.getValueAt(selectedRow, 2);
            String courseCode = courseCodeTextField.getText();

            String assignment = assignmentTextField.getText();
            String quiz = quizTextField.getText();
            String exam = examTextField.getText();
            String activity = activityTextField.getText();

            if (id!= null && name!= null && department!= null && courseCode!= null &&!assignment.isEmpty() &&!quiz.isEmpty() &&!exam.isEmpty() &&!activity.isEmpty()) {
                double assignmentGrade = 0;
                double quizGrade = 0;
                double examGrade = 0;
                double activityGrade = 0;

                try {
                    assignmentGrade = Double.parseDouble(assignment);
                    quizGrade = Double.parseDouble(quiz);
                    examGrade = Double.parseDouble(exam);
                    activityGrade = Double.parseDouble(activity);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Please enter valid grades.");
                    return;
                }

                double average = (assignmentGrade + quizGrade + examGrade + activityGrade) / 4;

                // Calculate the weighted grades
                double weightedAssignment = assignmentGrade * ASSIGNMENT_WEIGHT;
                double weightedLabActs = activityGrade * LAB_ACTS_WEIGHT;
                double weightedQuizzes = quizGrade * QUIZZES_WEIGHT;

                String classStanding;
                if (average >= 94 && average <= 100 ) {
                    classStanding = "1.00";

                } else if (average >= 88.5 && average <= 93.99) {
                    classStanding = "1.25";
                } else if (average >= 83 && average <= 88.49) {
                    classStanding = "1.50";
                } else if (average >= 77.5 && average <= 82.99) {
                    classStanding = "1.75";
                } else if (average >= 72 && average <= 77.49) {
                    classStanding = "2.00";
                } else if (average >= 65.5 && average <= 71.99) {
                    classStanding = "2.25";
                } else if (average >= 61 && average <= 65.49) {
                    classStanding = "2.50";
                } else if (average >= 55.5 && average <= 60.99) {
                    classStanding = "2.75";
                } else if (average >= 50 && average <= 55.49) {
                   classStanding = "3.00";
                } else if (average<= 49.99) {
                    classStanding = "5.00";
                } else {
                    classStanding = "INVALID";
                }

                tableModel1.setValueAt(courseCode, selectedRow, 3);
                tableModel1.setValueAt(assignmentGrade, selectedRow, 4);
                tableModel1.setValueAt(quizGrade, selectedRow, 5);
                tableModel1.setValueAt(examGrade, selectedRow, 6);
                tableModel1.setValueAt(activityGrade, selectedRow, 7);
                tableModel1.setValueAt(average, selectedRow, 8);
                tableModel1.setValueAt(classStanding, selectedRow, 9);
                
                 copySelectedRowToStudentInfoTable();

                // Transfer the selected student's information to the "Student Info" tab
                finalSelectedStudentInfoModel.setRowCount(0);
                finalSelectedStudentInfoModel.addRow(new Object[]{id, name, department, courseCode, assignmentGrade, quizGrade, examGrade, activityGrade, average, classStanding});
            } else {
                JOptionPane.showMessageDialog(null, "Please select a student and enter valid grades.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a student and enter valid grades.");
        }
    }
});

studentTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting() && studentTable.getSelectedRow() != -1) {
                    int selectedRow = studentTable.getSelectedRow();
                    selectedStudentInfoModel.setRowCount(0);
                    selectedStudentInfoModel.addRow(new Object[]{
                            tableModel1.getValueAt(selectedRow, 0),
                            tableModel1.getValueAt(selectedRow, 1),
                            tableModel1.getValueAt(selectedRow, 2),
                            tableModel1.getValueAt(selectedRow, 3),
                            tableModel1.getValueAt(selectedRow, 4),
                            tableModel1.getValueAt(selectedRow, 5),
                            tableModel1.getValueAt(selectedRow, 6),
                            tableModel1.getValueAt(selectedRow, 7),
                            tableModel1.getValueAt(selectedRow, 8),
                            tableModel1.getValueAt(selectedRow, 9),
                            tableModel1.getValueAt(selectedRow, 10)
                    });
                }
            }
        });

    for (String term : terms) {
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(0, 1));

        JPanel innerPanel = new JPanel();
        innerPanel.add(new JScrollPane(studentTable));
        innerPanel.add(courseCodeLabel);
        innerPanel.add(courseCodeTextField);
        innerPanel.add(assignmentLabel);
        innerPanel.add(assignmentTextField);
        innerPanel.add(quizLabel);
        innerPanel.add(quizTextField);
        innerPanel.add(examLabel);
        innerPanel.add(examTextField);
        innerPanel.add(activityLabel);
        innerPanel.add(activityTextField);
        innerPanel.add(addStudentButton);
        innerPanel.add(gradeStudentButton);

        panel.add(innerPanel);
        
    }

    prePanel.add(termComboBox);

    studentInfoPanel.add(studentInfoScrollPane, BorderLayout.CENTER);
}
   
   private void copySelectedRowToStudentInfoTable() {
    int selectedRow = studentTable.getSelectedRow();
    if (selectedRow >= 0) {
        DefaultTableModel selectedStudentInfoModel = (DefaultTableModel) selectedStudentInfoTable.getModel();
        selectedStudentInfoModel.setRowCount(0);
        for (int i = 0; i < studentTable.getColumnCount(); i++) {
            selectedStudentInfoModel.addRow(new Object[studentTable.getColumnCount()]);
        }
        for (int i = 0; i < studentTable.getColumnCount(); i++) {
            selectedStudentInfoModel.setValueAt(studentTable.getModel().getValueAt(selectedRow, i), 0, i);
        }
    }
}
        public static void main(String[] args) {

            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    try {
                        for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                            if ("Nimbus".equals(info.getName())) {
                                UIManager.setLookAndFeel(info.getClassName());
                                break;
                            }
                        }
                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
                        System.err.println("Error setting look and feel: " + e.getMessage());
                    }
                    new StudentRecordsManagement();
                }
            });
        }

    private void createTableComponents(JPanel prePanel, DefaultTableModel tableModel1, JTable studentTable) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    }